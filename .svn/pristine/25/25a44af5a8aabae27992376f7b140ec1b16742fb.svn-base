\documentclass[12pt]{article}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{hyperref}
\usepackage{fancyhdr}
\pagestyle{fancy}
\rhead{Documentation}
\lhead{The Golden Geese}

\begin{document}
\thispagestyle{fancy}

\begin{center}
\textbf{\huge The Goose Game -- Reimagined}\\
\large Paolo Aurecchia, Samuele Decarli, Irene Jacob, Julia Traiba
\end{center}

\section*{About the game}
The goose game is a traditional board game, where players race each other to reach the end of the board while avoiding traps. The board itself is divided into tiles which are organised into a spiral around the board. Some of the tiles have special effects such as {\em skip a turn} or {\em go back to tile 0}. The players throw a dice to see how far their counters can move, and take alternate turns to throw the dice.\\
For more information on the rules of the traditional game please visit:\\  
\url{http://www.compendia.co.uk/goose_rules.htm}
\section*{User Guide}
\subsection*{Features}
In order to load the game, you must run the python file {\em control.py}\\
To load the board of your choice, select the settings that you prefer in the input window and click submit.\\
Each time a new game is started, the board is generated randomly and the effect tiles are placed randomly around the board.\\
The stats-sidebar contains information such as Dice, which tells you the value of your dice--roll, Player which tells you whose turn it is and  HP which shows the health of the current player. The save button on the sidebar, allows the user to save the current game, and the load button allows the user to load the game that was last saved.\\
 When you start a new game, all the players are on tile zero in the centre of the board.\\ The last tile, which is coloured yellow, is where a player needs to land exactly, in order to win the game. Normal tiles are coloured grey on the board, while tiles with effects are brightly coloured. The sidebar on the left of the window describes the pawns for each player and explains what the symbols for the different effect tiles mean.\\ To end the game, a player can either win or click the Quit button.\\
This game, unlike the original goose game, has a health mechanic where each player starts out with 100HP. Some tiles can cause players to gain or lose HP points. If a player's HP becomes 0, they ``die" and have to start the game over from tile 0.\\Some tiles also offer the players a choice between two effects, these appear to the bottom-right corner of the window. This means that the game is not entirely based on luck and a player's decision can affect his winning or losing of the game.\\
The tile effects in the game are as following:\\
The health effect which causes a player to either gain or lose HP points, The step effect which causes the player to move forwards or backwards by a certain number of tiles, the turn-modification which allows players to gain or skip turns, the teleportation effect which causes a player to directly go to a set tile on the board, the move to player effect which teleports a player to the tile of another random player on the board, and the dice modification effect which temporarily changes the dice of the player (e.g. causes stuck dice).
\section*{Technical Information}
There are four python files which make up our program's code: {\em control.py, visual.py, visual\_options.py, model.py}.\\ {\em visual\_options.py} creates the input options window for the game, {\em model.py} works the mechanism of the game, {\em visual.py} generates the board and is responsible for representing the information from model visually, on the GUI and {\em control.py} is responsible for linking the model and the visual parts of the game together, and for handling turns. 
\subsection*{Data structures}
In {\em model.py}, dictionaries are used to store information about the board and the players, such as the information received from the input window, with the selected settings as well as all the information relative to each player. The players dictionary contains information such as effects with duration, where the name of the effect is the key and the turns left for the effect to last as its value. This value can be either negative or positive but with every turn, the value will move closer to 0 and once the value is 0, the effect is removed from the dictionary.\\
Depending on what level is selected, the number of tiles with effects on them varies, the boards dictionary has the tile numbers as its keys and the tiles' effects as its values.
The file {\em visual\_options.py} has a dictionary called inputVal, which has as key the name of the option and as value the option selected by the user. These values are then used in model and visual.py to generate the board.\\
In {\em visual.py}, the dictionaries board and players are used again to be able to use the information to represent the new position of the player, and also determine how to visualise the effect of any particular effect( such as losing HP points, teleporting to another tile on the board etc). This file also has a dictionary called numbers, which is used to show the tile number on the board.\\
One of the interesting data structures used in {\em control.py} is to save the game. The write\_save function writes the necessary data from the python files into a text files and uses json encoding to store the dictionaries with all the relevant information. Then when the game is loaded, the information is parsed from this json encoded file.\\
\subsection*{Functions}

\textbf{Control}\\
\begin{itemize}
	\item [-] game\_generator() generates a game.
	\item [-] tile\_effect() will call the correct effect functions from \textit{model.py}.
	\item [-] turn\_handler() handles turn switching.
	\item [-] turn() handles a player's turn.
	\item [-] load\_save() and write\_save() handle save games.
\end{itemize}

\textbf{Model}\\
\begin{itemize}
	\item [-] There is a function for each effect, they affect the players' dictionary.
	\item [-] board\_generator() will create a random board.
\end{itemize}

\textbf{Visual}\\
\begin{itemize}
	\item [-] color\_generator() Gives the appropriate colour to each tile, based on its effect.
	\item [-] print\_board() Will draw the entire board.
	\item [-] move\_player() Moves the players' counters.
	\item [-] load() Will call for the reading of a saved game and helps setting up the board for it.
	\item [-] The two sidebar functions create the sidebars.
	\item [-] activated\_effect() is used to display various effects.
\end{itemize}
\textbf{Options}\\
Contains functions and classes to operate the option window and provide values for the generators.\\

\end{document}
