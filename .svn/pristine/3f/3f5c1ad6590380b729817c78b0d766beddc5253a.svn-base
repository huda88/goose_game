# Interface for functions that go from model to visual

import model
import random
import copy
import visual_options
import visual
import time
import json
# save_board = {0: ('none',), 1: ('none',), 2: ('none',), 3: ('step', -2), 4: ('none',), 5: ('step', 1), 6: ('none',), 7: ('turn_mod', -2),
# 8: ('none',), 9: ('health', -40), 10: ('none',), 11: ('none',), 12: ('none',), 13: ('none',), 14: ('health', -20), 15: ('none',),
#          16: ('none',), 17: ('dice_mod', 'shift', -1, 5), 18: ('goto_p',), 19: ('health', -40), 20: ('dice_mod', 'stuck', 2, 3), 21: ('step', -10), 22: ('none',), 23: ('none',),
#          24: ('step', 5), 25: ('goto_t', 30), 26: ('none',), 27: ('none',), 28: ('turn_mod', -2), 29: ('none',), 30: ('health', -20), 31: ('none',),
#          32: ('health', -90), 33: ('none',), 34: ('turn_mod', -1), 35: ('none',), 36: ('health', -75), 37: ('none',), 38: ('goto_t', 0), 39: ('none',)}
#
# save_players = {'s': [0, [1, 6], {}, 100], 1: [5, [1, 6], {}, 50], 2: [9, [1, 6], {}, 32]}
#
# save_current_p = 2


# ---------------- Functions that interact with model ------------------- #


# check if some one has win
def check_win(length, players, current_p):
    if players[current_p][0] == length:
        return True
    else:
        return False


# change the current user
def current_player_generator(now, n_players):
    if now < n_players:
        now += 1
    else:
        now = 1
    return now


current_p = 1

# Main to generate the game
def game_generator():
    global current_p
    if ask_old_new():
        model.board = save_board
        model.players = save_players
        current_p = save_current_p
        length = len(model.board) - 1
        n_players = len(model.players) - 1
    else:
        level, dice, length, n_players = ask_for_info()
        effect_list = ['step', 'health', 'goto_p', 'turn_mod', 'goto_t', 'dice_mod']
        current_p = 1
        model.board_generator(length, dice, effect_list, level)
        model.player_generator(n_players, dice)
    setup(model.board, n_players)
    # while not check_win(length, model.players, current_p):
    #
    #     display_current_p(current_p)
    #     turn(model.players, current_p, model.board)
    #     current_p = current_player_generator(current_p, n_players)
    # else:
    #     display_winner(current_p)


# Dice roller
def roll_dice(dice):
    # ask_for_dice()
    result = random.randint(dice[0], dice[1])
    display_dice(result)
    print(result)
    return result


# Checks and executes the tile effect
def tile_effect(players, current_p, board):
    position = players[current_p][0]
    if 'none' in board[position]:
        return

    elif 'step' in board[position] and board[position][1] < 0:
        if ask_for_choice('Step back by {0} tile(s)'.format(board[position][1]*-1),
                          'Lose {0} health'.format(board[position][1]*5*-1)):
            (model.step(players, current_p, board[position][1], False))
            visual.create_hide_roll()
            visual.activated_effect('Oh noo! You have to go back to help your friends! You step back by {0} tiles.'.format(board[position][1]*-1))
        else:
            (model.step(players, current_p, board[position][1], True))
            visual.create_hide_roll()
            visual.activated_effect('You got hurt! You lost {0} health.'.format(board[position][1]*5*-1))

    elif 'step' in board[position] and board[position][1] > 0:
        if ask_for_choice('Step forward by {0} tile(s)'.format(board[position][1]),
                          'Gain {0} health'.format(board[position][1]*5)):
            (model.step(players, current_p, board[position][1], False))
            visual.create_hide_roll()
            visual.activated_effect('Great! You go farther than you thought! Continue like that! You step forward by {0} tiles.'.format(board[position][1]))
        else:
            (model.step(players, current_p, board[position][1], True))
            visual.create_hide_roll()
            visual.activated_effect('Lucky you! You found a potion, you gain {0} health.'.format(board[position][1]*5))

    # elif 'step' in board[position]:
    #     if ask_for_choice(('step', board[position][1]), 'health'):
    #         (model.step(players, current_p, board[position][1], False))
    #         visual.create_hide_roll()
    #         if board[position][1] < 0:
    #             visual.activated_effect('Oh noo! you have to go back to help your friends!, you go back {0} step '.format(board[position][1]))
    #         else:
    #             visual.activated_effect('Great! you go far that you thought! Continue like that, {0} step'.format(board[position][1]))
    #         visual.delete_hide_roll()
    #     else:
    #         (model.step(players, current_p, board[position][1], True))
    #         visual.create_hide_roll()
    #         if board[position][1] < 0:
    #             visual.activated_effect('A sore touch you. You lost {0} health'.format(board[position][1]))
    #         else:
    #             visual.activated_effect('Lucky you! You found a potion, you win {0} health '.format(board[position][1]))
    #         visual.delete_hide_roll()

    elif 'turn_mod' in board[position] and board[position][1] < 0:
        if ask_for_choice('Skip {0} turn(s)'.format(board[position][1]*-1),
                          'Lose {0} health'.format(board[position][1]*20*-1)):
            (model.turn_mod(players, current_p, board[position][1], False))
            visual.create_hide_roll()
            visual.activated_effect('You walk into quicksands! It will take time to get out, you skip {0} turns.'.format(board[position][1]*-1))
            visual.delete_hide_roll()
        else:
            (model.turn_mod(players, current_p, board[position][1], True))
            visual.create_hide_roll()
            visual.activated_effect('You have to climb a mountain, it takes energy. You lose {0} health.'.format(board[position][1]*20*-1))
            visual.delete_hide_roll()

    elif 'turn_mod' in board[position] and board[position][1] > 0:
        if ask_for_choice('Gain {0} turn(s)'.format(board[position][1]),
                          'Gain {0} health'.format(board[position][1]*20)):
            (model.turn_mod(players, current_p, board[position][1], False))
            visual.create_hide_roll()
            visual.activated_effect('You found a skateboard. You gain {0} turns by riding it!'.format(board[position][1]))
            visual.delete_hide_roll()
        else:
            (model.turn_mod(players, current_p, board[position][1], True))
            visual.create_hide_roll()
            visual.activated_effect('You find a meadow where you can relax, you gain {0} health.'.format(board[position][1]*20))
            visual.delete_hide_roll()

    # elif 'turn_mod' in board[position]:
    #     if ask_for_choice(('turn_mod', board[position][1]), 'health'):
    #         (model.turn_mod(players, current_p, board[position][1], False))
    #         visual.create_hide_roll()
    #         if board[position][1] < 0:
    #             visual.activated_effect('You walk into a quicksand! It will take time to get out, {0} turn'.format(board[position][1]))
    #         else:
    #             visual.activated_effect('You find a skateboard. Goes further! {0}'.format(board[position][1]))
    #         visual.delete_hide_roll()
    #     else:
    #         (model.turn_mod(players, current_p, board[position][1], True))
    #         visual.create_hide_roll()
    #         if board[position][1] < 0:
    #             visual.activated_effect('You have to climb a mountain, it asks you energy. you lose {0} health'.format(board[position][1]))
    #         else:
    #             visual.activated_effect('You find a loan where you can relax, you win {0} health'.format(board[position][1]))
    #         visual.delete_hide_roll()

    elif 'goto_p' in board[position]:
        (model.goto_p(players, current_p))
        visual.create_hide_roll()
        visual.activated_effect("Some strange magic teleports to another player, you don't like them much.")
        visual.delete_hide_roll()

    elif 'goto_t' in board[position]:
        (model.goto_t(players, current_p, board[position][1]))
        visual.create_hide_roll()
        visual.activated_effect('You are teleported to tile {0} by an ancient spell.'.format(board[position][1]))
        visual.delete_hide_roll()

    elif 'dice_mod' in board[position]:
        (model.dice_mod(players, current_p, board[position][1], board[position][2], board[position][3]))
        visual.create_hide_roll()
        visual.activated_effect('You ate a strange fruit, it seems that your dice is acting weird,'
                                'though it should wore off in {0} turns.'.format(board[position][3]))
        visual.delete_hide_roll()

    elif 'health' in board[position]:
        (model.health(players, current_p, board[position][1]))
        visual.create_hide_roll()
        if board[position][1] < 0:
            visual.activated_effect('Ouch! You got hurt! You lose {0} health.'.format(board[position][1]*-1))
        else:
            visual.activated_effect('Great! A hot meal! Eat and gain {0} health.'.format(board[position][1]))
        visual.delete_hide_roll()

    return


# def turn_by_yourself():
#     global current_p
#     turn(model.players, current_p, model.board)
#     current_p = current_player_generator(current_p, 2)
#     if check_win(100, model.players, current_p):
#         display_winner(current_p)


# Swap players for new turn, and sets it up
def turn_handler():
    global current_p
    turn(model.players, current_p, model.board)
    if check_win(visual_options.input_data('board length'), model.players, current_p):
        display_winner(current_p)
    if not model.check_for_more(model.players[current_p]):
        current_p = current_player_generator(current_p, visual_options.input_data('number of players'))


# A single turn structure
def turn(players, current_p, board):
    # Turn setup
    visual.print_turn(current_p)
    visual.print_health(players[current_p])
    print(players)
    if model.check_for_skip(players[current_p]):
        model.effect_expire(players, current_p)
        visual.activated_effect('Player {0} skips a turn!'.format(current_p))
        print(players)
        return
    model.effect_expire(players, current_p)

    # First move
    steps = roll_dice(players[current_p][1])
    reverse = False
    for i in range(steps):
        if not reverse:
            players[current_p][0] += 1
            visual.print_move(players, current_p)
            if players[current_p][0] == len(board) - 1:
                reverse = True
            time.sleep(.025)
        else:
            players[current_p][0] -= 1
            visual.print_move(players, current_p)
            time.sleep(.025)

    print(players)

    # Effects
    previous = players[current_p][0]
    tile_effect(players, current_p, board)
    visual.print_health(players[current_p])
    visual.print_move(players, current_p)
    current = players[current_p][0]

    print(players)
    # Additional effects
    while previous != current and not (players[current_p][3] <= 0):
        previous = current
        tile_effect(players, current_p, board)
        visual.print_health(players[current_p])
        visual.print_move(players, current_p)
        current = players[current_p][0]
        print(players)

    # Death
    if players[current_p][3] <= 0:
        visual.activated_effect('Sorry player {0}! You died! You have to start over.'.format(current_p))
        players[current_p] = copy.deepcopy(players['s'])
        visual.print_health(players[current_p])
        visual.print_move(players, current_p)
    print(players)
    return


# ---------------- Functions that interact with view ------------------- #


# ask use old or new
def ask_old_new():
    # if visual.old_new == True:
    # return True
    # else:
    return False


# Converts data from visual input to usable
def convert_data(level_v, dice_v):
    if level_v == 'Hard':
        level = 40
    elif level_v == 'Medium':
        level = 30
    elif level_v == 'Easy':
        level = 20

    dice = (1, dice_v)
    return level, dice


# Asks for board info
def ask_for_info():
    # length_v = 100
    # n_players_v = 2
    # dice_v = 6
    # level_v = 'Medium'
    length_v = visual_options.input_data('board length')
    n_players_v = visual_options.input_data('number of players')
    dice_v = visual_options.input_data('dice')
    level_v = visual_options.input_data('difficulty')
    level_v, dice_v = convert_data(level_v, dice_v)
    return level_v, dice_v, length_v, n_players_v


# Call board drawer for initial setup
def setup(board, players):
    print('k')
    visual.print_board(board)
    print('kk')
    visual.sidebar()
    print('kkkk')
    visual.make_players(players, 0)
    return


# # Updates current player info for visual
# def display_current_p(current_p):
#     print(current_p)
#     return


# # Asks for player to roll dice
# def ask_for_dice():
#     thing = input('Hit return to roll dice')
#     while thing != '':
#         thing = input('Hit return to roll dice')
#     return


# Display dice result
def display_dice(result):
    visual.print_dice(result)
    return


# Ask for player choice
# ToDo Options should later be tuples representing effects and their data
def ask_for_choice(option0, option1):
    print(option0, option1)
    a, b = visual.choice(option0, option1)
    return a == 0


# # Display move
# def move(player, new_position):
#     import visual
#
#     visual.move_player(player, diceval)
#     return


# # Display death notification
# def died(current_p):
#     print('Player {0} died'.format(current_p))
#     return


# Display winner
def display_winner(current_p):
    visual.win_effect(current_p)
    time.sleep(3)
    quit()
    #visual.slide_win(('Player', current_p, 'won the game!'), current_p)


# Loads a saved game
def load_save():
    try:
        file = open('save.txt')
        current_p_l = int(file.readline().strip())
        board = file.readline().strip()
        board = json.loads(board)
        board = {int(tile): tuple(board[tile]) for tile in board}
        players = file.readline().strip()
        players = json.loads(players)
        players = [(int(player), players[player]) if player.isdigit() else (player, players[player]) for player in players]
        players = dict(players)
        file.close()
        if len(current_p_l) == 0 or len(board) == 0 or len(players) == 0:
            return -1
        return board, players, current_p_l
    except:
        return -1


# Writes a save game
def write_save():
    global current_p
    board_s = json.dumps(model.board, separators=(',', ':'))
    players_s = json.dumps(model.players, separators=(',', ':'))
    current_p_s = str(current_p)
    file = open('save.txt', 'w')
    file.write(current_p_s+'\n')
    file.write(board_s+'\n')
    file.write(players_s+'\n')
    file.close()
    return


game_generator()
